"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.HttpPost_BEARER = exports.HttpCustom_BEARER = exports.HttpGet_BEARER = exports.accountsStorage = exports.crackedAccount = exports.microsoftAccount = exports.mojangAccount = exports.account = exports.OwnershipError = exports.AuthenticationError = exports.MojangAPI = exports.CrackedAuth = exports.MojangAuth = exports.MicrosoftAuth = void 0;
require("reflect-metadata");
var class_transformer_1 = require("class-transformer");
var crypto_1 = __importDefault(require("crypto"));
var atob_1 = __importDefault(require("atob"));
var http_client_methods_1 = require("http-client-methods");
var MicrosoftAuth;
(function (MicrosoftAuth) {
    MicrosoftAuth.scope = "XboxLive.signin offline_access";
    var compiledID;
    var compiledScope;
    var compiledUrl;
    var compiledSecret;
    function setup(_appID, _appSecret, _redirectURL) {
        MicrosoftAuth.appID = _appID;
        MicrosoftAuth.appSecret = _appSecret;
        MicrosoftAuth.redirectURL = _redirectURL;
        compiledID = encodeURIComponent(MicrosoftAuth.appID);
        compiledScope = encodeURIComponent(MicrosoftAuth.scope);
        compiledUrl = encodeURIComponent(MicrosoftAuth.redirectURL);
        compiledSecret = encodeURIComponent(MicrosoftAuth.appSecret);
    }
    MicrosoftAuth.setup = setup;
    function createUrl() {
        return "https://login.live.com/oauth20_authorize.srf?client_id=" + compiledID + "&response_type=code&redirect_uri=" + compiledUrl + "&scope=" + compiledScope;
    }
    MicrosoftAuth.createUrl = createUrl;
    function getToken(authCode) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://login.live.com/oauth20_token.srf";
                        body = "client_id=" + compiledID + "&client_secret=" + compiledSecret + "&code=" + authCode + "&grant_type=authorization_code&redirect_uri=" + compiledUrl;
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, body, { "Content-Type": "application/x-www-form-urlencoded" })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.error) {
                            throw new AuthenticationError(jsonResponse.error, jsonResponse.error_description, jsonResponse.correlation_id);
                        }
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MicrosoftAuth.getToken = getToken;
    function getTokenRefresh(refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://login.live.com/oauth20_token.srf";
                        body = "client_id=" + compiledID + "&client_secret=" + compiledSecret + "&refresh_token=" + refreshToken + "&grant_type=refresh_token&redirect_uri=" + compiledUrl;
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, body, { "Content-Type": "application/x-www-form-urlencoded" })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.error) {
                            throw new AuthenticationError(jsonResponse.error, jsonResponse.error_description, jsonResponse.correlation_id);
                        }
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MicrosoftAuth.getTokenRefresh = getTokenRefresh;
    function authXBL(accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            "Properties": {
                                "AuthMethod": "RPS",
                                "SiteName": "user.auth.xboxlive.com",
                                "RpsTicket": "d=" + accessToken // your access token from step 2 here
                            },
                            "RelyingParty": "http://auth.xboxlive.com",
                            "TokenType": "JWT"
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost("https://user.auth.xboxlive.com/user/authenticate", JSON.stringify(body), {
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MicrosoftAuth.authXBL = authXBL;
    function authXSTS(xblToken) {
        return __awaiter(this, void 0, void 0, function () {
            var body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            "Properties": {
                                "SandboxId": "RETAIL",
                                "UserTokens": [
                                    "" + xblToken
                                ]
                            },
                            "RelyingParty": "rp://api.minecraftservices.com/",
                            "TokenType": "JWT"
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost("https://xsts.auth.xboxlive.com/xsts/authorize", JSON.stringify(body), {
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.XErr) {
                            throw new AuthenticationError(jsonResponse.XErr, jsonResponse.Message, jsonResponse.Redirect);
                        }
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MicrosoftAuth.authXSTS = authXSTS;
    function getMinecraftToken(xstsToken, uhs) {
        return __awaiter(this, void 0, void 0, function () {
            var body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            "identityToken": "XBL3.0 x=" + uhs + ";" + xstsToken
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost("https://api.minecraftservices.com/authentication/login_with_xbox", JSON.stringify(body), {
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MicrosoftAuth.getMinecraftToken = getMinecraftToken;
    function authFlow(authCode) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenRes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getToken(authCode)];
                    case 1:
                        tokenRes = _a.sent();
                        return [4 /*yield*/, authFlowXBL(tokenRes.access_token, tokenRes.refresh_token)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    }
    MicrosoftAuth.authFlow = authFlow;
    function authFlowRefresh(refresh_token) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenRes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getTokenRefresh(refresh_token)];
                    case 1:
                        tokenRes = _a.sent();
                        return [4 /*yield*/, authFlowXBL(tokenRes.access_token, tokenRes.refresh_token)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    }
    MicrosoftAuth.authFlowRefresh = authFlowRefresh;
    function authFlowXBL(token, refresh_token) {
        return __awaiter(this, void 0, void 0, function () {
            var xblRes, xstsRes, mcToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, authXBL(token)];
                    case 1:
                        xblRes = _a.sent();
                        return [4 /*yield*/, authXSTS(xblRes.Token)];
                    case 2:
                        xstsRes = _a.sent();
                        return [4 /*yield*/, getMinecraftToken(xstsRes.Token, xblRes.DisplayClaims.xui[0].uhs)];
                    case 3:
                        mcToken = _a.sent();
                        return [2 /*return*/, { access_token: mcToken.access_token, refresh_token: refresh_token }];
                }
            });
        });
    }
    MicrosoftAuth.authFlowXBL = authFlowXBL;
})(MicrosoftAuth = exports.MicrosoftAuth || (exports.MicrosoftAuth = {}));
var MojangAuth;
(function (MojangAuth) {
    var authUrl = "https://authserver.mojang.com";
    function authenticate(username, password, clientToken) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = authUrl + "/authenticate";
                        body = {
                            "agent": {
                                "name": "Minecraft",
                                "version": 1
                            },
                            "username": "" + username,
                            "password": "" + password,
                            "requestUser": true
                        };
                        if (clientToken) {
                            body.clientToken = clientToken;
                        }
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, JSON.stringify(body), { "Content-Type": "application/json" })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.error) {
                            throw new AuthenticationError(jsonResponse.error, jsonResponse.errorMessage, jsonResponse.cause);
                        }
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAuth.authenticate = authenticate;
    function refresh(accessToken, clientToken) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = authUrl + "/refresh";
                        body = {
                            "accessToken": "" + accessToken,
                            "clientToken": "" + clientToken,
                            "requestUser": true
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, JSON.stringify(body), { "Content-Type": "application/json" })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.error) {
                            throw new AuthenticationError(jsonResponse.error, jsonResponse.errorMessage, jsonResponse.cause);
                        }
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAuth.refresh = refresh;
    function validateToken(token, alternativeValidation) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!alternativeValidation) return [3 /*break*/, 2];
                        return [4 /*yield*/, _validateToken(token)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, _validateTokenAlternative(token)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    }
    MojangAuth.validateToken = validateToken;
    function _validateToken(token) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = authUrl + "/validate";
                        body = {
                            "accessToken": "" + token
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, JSON.stringify(body), { "Content-Type": "application/json" })];
                    case 1:
                        response = _a.sent();
                        if (response.length < 1)
                            return [2 /*return*/, true];
                        jsonResponse = JSON.parse(response);
                        if (jsonResponse.error) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    MojangAuth._validateToken = _validateToken;
    function _validateTokenAlternative(token) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, HttpGet_BEARER("https://api.minecraftservices.com/minecraft/profile", token, {}, true)];
                    case 1:
                        res = _a.sent();
                        if (res.status != 401 && res.status != 403) {
                            return [2 /*return*/, true];
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    }
    MojangAuth._validateTokenAlternative = _validateTokenAlternative;
})(MojangAuth = exports.MojangAuth || (exports.MojangAuth = {}));
var CrackedAuth;
(function (CrackedAuth) {
    function uuid(username) {
        var md5Bytes = crypto_1["default"].createHash('md5').update(username).digest();
        md5Bytes[6] &= 0x0f;
        md5Bytes[6] |= 0x30;
        md5Bytes[8] &= 0x3f;
        md5Bytes[8] |= 0x80;
        return md5Bytes.toString('hex');
    }
    CrackedAuth.uuid = uuid;
})(CrackedAuth = exports.CrackedAuth || (exports.CrackedAuth = {}));
var MojangAPI;
(function (MojangAPI) {
    function getStatus() {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://status.mojang.com/check";
                        return [4 /*yield*/, http_client_methods_1.HttpGet(url)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.getStatus = getStatus;
    function usernameToUUID(username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://api.mojang.com/users/profiles/minecraft/" + username;
                        return [4 /*yield*/, http_client_methods_1.HttpGet(url)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.usernameToUUID = usernameToUUID;
    function nameHistory(uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://api.mojang.com/user/profiles/" + uuid + "/names";
                        return [4 /*yield*/, http_client_methods_1.HttpGet(url)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.nameHistory = nameHistory;
    function getProfileByUUID(uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponseEncoded, decodedValue, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://sessionserver.mojang.com/session/minecraft/profile/" + uuid;
                        return [4 /*yield*/, http_client_methods_1.HttpGet(url)];
                    case 1:
                        response = _a.sent();
                        jsonResponseEncoded = JSON.parse(response);
                        decodedValue = JSON.parse(atob_1["default"](jsonResponseEncoded.properties[0].value));
                        jsonResponse = jsonResponseEncoded;
                        jsonResponse.properties[0].value = decodedValue;
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.getProfileByUUID = getProfileByUUID;
    function getBlockedServers() {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://sessionserver.mojang.com/blockedservers";
                        return [4 /*yield*/, http_client_methods_1.HttpGet(url)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.split('\n')];
                }
            });
        });
    }
    MojangAPI.getBlockedServers = getBlockedServers;
    function getStatistics(options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options) {
                            options = ["item_sold_minecraft", "prepaid_card_redeemed_minecraft"];
                        }
                        url = "https://api.mojang.com/orders/statistics";
                        body = {
                            "metricKeys": options
                        };
                        return [4 /*yield*/, http_client_methods_1.HttpPost(url, JSON.stringify(body), { "Content-Type": "application/json" })];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.getStatistics = getStatistics;
    function nameChangeInfo(token) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://api.minecraftservices.com/minecraft/profile/namechange";
                        return [4 /*yield*/, HttpGet_BEARER(url, token)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.nameChangeInfo = nameChangeInfo;
    function nameAvailability(name, token) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://api.minecraftservices.com/minecraft/profile/name/" + name + "/available";
                        return [4 /*yield*/, HttpGet_BEARER(url, token)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse.status == "AVAILABLE"];
                }
            });
        });
    }
    MojangAPI.nameAvailability = nameAvailability;
    function changeSkin(url, variant, token) {
        return __awaiter(this, void 0, void 0, function () {
            var body, Rurl, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            "variant": variant,
                            "url": url
                        };
                        Rurl = "https://api.minecraftservices.com/minecraft/profile/skins";
                        return [4 /*yield*/, HttpPost_BEARER(Rurl, JSON.stringify(body), token, { "Content-Type": "application/json" })];
                    case 1:
                        response = _a.sent();
                        if (response.length > 0)
                            throw response;
                        return [2 /*return*/];
                }
            });
        });
    }
    MojangAPI.changeSkin = changeSkin;
    function resetSkin(uuid, token) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://api.mojang.com/user/profile/" + uuid + "/skin";
                        return [4 /*yield*/, HttpCustom_BEARER("delete", url, token)];
                    case 1:
                        response = _a.sent();
                        if (response.length > 0)
                            throw response;
                        return [2 /*return*/];
                }
            });
        });
    }
    MojangAPI.resetSkin = resetSkin;
    function checkOwnership(token, profileResp) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!profileResp) return [3 /*break*/, 2];
                        return [4 /*yield*/, getProfile(token)];
                    case 1:
                        profileResp = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, !!profileResp.id];
                }
            });
        });
    }
    MojangAPI.checkOwnership = checkOwnership;
    function getProfile(token) {
        return __awaiter(this, void 0, void 0, function () {
            var response, jsonResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, HttpGet_BEARER("https://api.minecraftservices.com/minecraft/profile", token)];
                    case 1:
                        response = _a.sent();
                        jsonResponse = JSON.parse(response);
                        return [2 /*return*/, jsonResponse];
                }
            });
        });
    }
    MojangAPI.getProfile = getProfile;
})(MojangAPI = exports.MojangAPI || (exports.MojangAPI = {}));
var AuthenticationError = /** @class */ (function (_super) {
    __extends(AuthenticationError, _super);
    function AuthenticationError(_error, _message, _additionalInfo) {
        var _this = _super.call(this, _message) || this;
        _this.name = _error;
        _this.additionalInfo = _additionalInfo;
        return _this;
    }
    return AuthenticationError;
}(Error));
exports.AuthenticationError = AuthenticationError;
var OwnershipError = /** @class */ (function (_super) {
    __extends(OwnershipError, _super);
    function OwnershipError(_error) {
        return _super.call(this, _error) || this;
    }
    return OwnershipError;
}(Error));
exports.OwnershipError = OwnershipError;
var account = /** @class */ (function () {
    function account(token, type) {
        this.properties = {};
        this.accessToken = token;
        this.type = type;
    }
    account.prototype.checkValidToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, MojangAuth.validateToken(this.accessToken, this.alternativeValidation)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    account.prototype.checkOwnership = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/, false];
                        _a = this;
                        return [4 /*yield*/, MojangAPI.checkOwnership(this.accessToken)];
                    case 1:
                        _a.ownership = _b.sent();
                        return [2 /*return*/, this.ownership];
                }
            });
        });
    };
    account.prototype.getProfile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/, undefined];
                        if (!!this.ownership) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.checkOwnership()];
                    case 1:
                        _a.sent();
                        if (!this.ownership)
                            throw new OwnershipError("User don't have minecraft on his account!");
                        return [2 /*return*/, this.getProfile()];
                    case 2: return [4 /*yield*/, MojangAPI.getProfile(this.accessToken)];
                    case 3:
                        profile = _a.sent();
                        this.username = profile.name;
                        this.uuid = profile.id;
                        this.profile = profile;
                        return [2 /*return*/, profile];
                }
            });
        });
    };
    account.prototype.changeSkin = function (url, variant) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/];
                        return [4 /*yield*/, MojangAPI.changeSkin(url, variant, this.accessToken)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    account.prototype.checkNameAvailability = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, MojangAPI.nameAvailability(name, this.accessToken)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    account.prototype.canChangeName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessToken)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, MojangAPI.nameChangeInfo(this.accessToken)];
                    case 1: return [2 /*return*/, (_a.sent()).nameChangeAllowed];
                }
            });
        });
    };
    return account;
}());
exports.account = account;
var mojangAccount = /** @class */ (function (_super) {
    __extends(mojangAccount, _super);
    function mojangAccount() {
        return _super.call(this, undefined, "mojang") || this;
    }
    mojangAccount.prototype.Login = function (username, password, saveCredentials) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!username)
                            username = this.login_username;
                        if (!password)
                            password = this.login_password;
                        if (!username || !password)
                            throw new AuthenticationError("Username or password not provided", "Username or password not provided", "");
                        return [4 /*yield*/, MojangAuth.authenticate(username, password)];
                    case 1:
                        resp = _a.sent();
                        this.clientToken = resp.clientToken;
                        this.accessToken = resp.accessToken;
                        this.login_username = undefined;
                        this.login_password = undefined;
                        if (saveCredentials) {
                            this.login_username = username;
                            this.login_password = password;
                        }
                        return [2 /*return*/, this.accessToken];
                }
            });
        });
    };
    mojangAccount.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MojangAuth.refresh(this.accessToken, this.clientToken)];
                    case 1:
                        resp = _a.sent();
                        this.clientToken = resp.clientToken;
                        this.accessToken = resp.accessToken;
                        return [2 /*return*/, this.accessToken];
                }
            });
        });
    };
    mojangAccount.prototype.use = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkValidToken()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        return [2 /*return*/, this.accessToken];
                    case 2:
                        if (!(this.login_username && this.login_password)) return [3 /*break*/, 8];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 7]);
                        return [4 /*yield*/, this.refresh()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, this.accessToken];
                    case 5:
                        e_1 = _a.sent();
                        return [4 /*yield*/, this.Login()];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, this.accessToken];
                    case 7: return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.refresh()];
                    case 9:
                        _a.sent();
                        return [2 /*return*/, this.accessToken];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    return mojangAccount;
}(account));
exports.mojangAccount = mojangAccount;
var microsoftAccount = /** @class */ (function (_super) {
    __extends(microsoftAccount, _super);
    function microsoftAccount() {
        var _this = _super.call(this, undefined, "microsoft") || this;
        _this.alternativeValidation = true;
        return _this;
    }
    microsoftAccount.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MicrosoftAuth.authFlowRefresh(this.refreshToken)];
                    case 1:
                        resp = _a.sent();
                        this.refreshToken = resp.refresh_token;
                        this.accessToken = resp.access_token;
                        return [2 /*return*/, this.accessToken];
                }
            });
        });
    };
    microsoftAccount.prototype.authFlow = function (authCode) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.authCode = authCode;
                        return [4 /*yield*/, MicrosoftAuth.authFlow(this.authCode)];
                    case 1:
                        resp = _a.sent();
                        this.refreshToken = resp.refresh_token;
                        this.accessToken = resp.access_token;
                        return [2 /*return*/, this.accessToken];
                }
            });
        });
    };
    microsoftAccount.prototype.use = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkValidToken()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        return [2 /*return*/, this.accessToken];
                    case 2: return [4 /*yield*/, this.refresh()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.accessToken];
                }
            });
        });
    };
    return microsoftAccount;
}(account));
exports.microsoftAccount = microsoftAccount;
var crackedAccount = /** @class */ (function (_super) {
    __extends(crackedAccount, _super);
    function crackedAccount(username) {
        var _this = _super.call(this, undefined, "cracked") || this;
        _this.ownership = false;
        _this.setUsername(username);
        return _this;
    }
    crackedAccount.prototype.setUsername = function (username) {
        if (!username)
            return;
        this.username = username;
        this.uuid = CrackedAuth.uuid(username);
    };
    return crackedAccount;
}(account));
exports.crackedAccount = crackedAccount;
var accountsStorage = /** @class */ (function () {
    function accountsStorage() {
        this.accountList = [];
    }
    accountsStorage.prototype.getAccount = function (index) {
        return this.accountList[index];
    };
    accountsStorage.prototype.getAccountByUUID = function (uuid) {
        var acc;
        this.accountList.forEach(function (el) {
            if (el.uuid === uuid) {
                acc = el;
            }
        });
        return acc;
    };
    accountsStorage.prototype.getAccountByName = function (name) {
        var acc;
        this.accountList.forEach(function (el) {
            if (el.username === name) {
                acc = el;
            }
        });
        return acc;
    };
    accountsStorage.prototype.addAccount = function (account) {
        this.accountList.push(account);
    };
    accountsStorage.prototype.deleteAccount = function (account) {
        for (var i = 0; i < this.accountList.length; i++) {
            if (this.accountList[i] === account) {
                this.accountList.splice(i, 1);
                i--;
            }
        }
    };
    accountsStorage.prototype.serialize = function () {
        return JSON.stringify(this.accountList);
    };
    accountsStorage.deserialize = function (data) {
        var accounts = JSON.parse(data);
        var accStorage = new accountsStorage();
        accounts.forEach(function (el) {
            if (el.type == "microsoft") {
                accStorage.addAccount(class_transformer_1.plainToClass(microsoftAccount, el));
            }
            else if (el.type == "mojang") {
                accStorage.addAccount(class_transformer_1.plainToClass(mojangAccount, el));
            }
            else if (el.type == "cracked") {
                accStorage.addAccount(class_transformer_1.plainToClass(crackedAccount, el));
            }
            else {
                accStorage.addAccount(class_transformer_1.plainToClass(account, el));
            }
        });
        return accStorage;
    };
    return accountsStorage;
}());
exports.accountsStorage = accountsStorage;
function HttpGet_BEARER(url, token, headers, objectResponse) {
    if (objectResponse === void 0) { objectResponse = false; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, HttpCustom_BEARER("get", url, token, undefined, headers, objectResponse)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.HttpGet_BEARER = HttpGet_BEARER;
function HttpCustom_BEARER(method, url, token, body, headers, objectResponse) {
    if (objectResponse === void 0) { objectResponse = false; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!headers)
                headers = {};
            headers["Authorization"] = "Bearer " + token;
            return [2 /*return*/, http_client_methods_1.HttpCustom(method, url, body, headers, objectResponse)];
        });
    });
}
exports.HttpCustom_BEARER = HttpCustom_BEARER;
function HttpPost_BEARER(url, data, token, headers, objectResponse) {
    if (objectResponse === void 0) { objectResponse = false; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, HttpCustom_BEARER("post", url, token, data, headers, objectResponse)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.HttpPost_BEARER = HttpPost_BEARER;
//# sourceMappingURL=index.js.map